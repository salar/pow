// Generated by CoffeeScript 1.5.0
(function() {
  var Configuration, async, compilePattern, fs, getUserEnv, mkdirp, path, sourceScriptEnv;

  fs = require("fs");

  path = require("path");

  async = require("async");

  mkdirp = require("./util").mkdirp;

  sourceScriptEnv = require("./util").sourceScriptEnv;

  getUserEnv = require("./util").getUserEnv;

  module.exports = Configuration = (function() {

    Configuration.getUserConfiguration = function(callback) {
      return callback(new Configuration);
    };

    Configuration.optionNames = ["bin", "dnsPort", "domains"];

    function Configuration(env) {
      if (env == null) {
        env = process.env;
      }
      this.initialize(env);
    }

    Configuration.prototype.initialize = function(env) {
      var _base, _ref, _ref1, _ref2, _ref3, _ref4;
      this.env = env;
      this.bin = (_ref = env.POW_BIN) != null ? _ref : path.join(__dirname, "../bin/pow");
      this.dnsPort = (_ref1 = env.POW_DNS_PORT) != null ? _ref1 : 20560;
      this.domains = (_ref2 = (_ref3 = env.POW_DOMAINS) != null ? _ref3 : env.POW_DOMAIN) != null ? _ref2 : "dev,salar.silktest";
      this.domains = (_ref4 = typeof (_base = this.domains).split === "function" ? _base.split(",") : void 0) != null ? _ref4 : this.domains;
      return this.dnsDomainPattern = compilePattern(this.domains);
    };

    Configuration.prototype.toJSON = function() {
      var key, result, _i, _len, _ref;
      result = {};
      _ref = this.constructor.optionNames;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        result[key] = this[key];
      }
      return result;
    };

    return Configuration;

  })();

  compilePattern = function(domains) {
    return RegExp("((^|\\.)(" + (domains.join("|")) + "))\\.?$", "i");
  };

}).call(this);
