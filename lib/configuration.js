// Generated by CoffeeScript 1.5.0
(function() {
  var Configuration, Logger, async, compilePattern, fs, getUserEnv, libraryPath, mkdirp, path, sourceScriptEnv,
    __slice = [].slice;

  fs = require("fs");

  path = require("path");

  async = require("async");

  Logger = require("./logger");

  mkdirp = require("./util").mkdirp;

  sourceScriptEnv = require("./util").sourceScriptEnv;

  getUserEnv = require("./util").getUserEnv;

  module.exports = Configuration = (function() {

    Configuration.loadUserConfigurationEnvironment = function(callback) {
      var _this = this;
      return getUserEnv(function(err, env) {
        if (err) {
          return callback(err);
        } else {
          return callback(null, env);
        }
      });
    };

    Configuration.getUserConfiguration = function(callback) {
      return this.loadUserConfigurationEnvironment(function(err, env) {
        if (err) {
          return callback(err);
        } else {
          return callback(null, new Configuration(env));
        }
      });
    };

    Configuration.optionNames = ["bin", "dnsPort", "domains", "logRoot"];

    function Configuration(env) {
      if (env == null) {
        env = process.env;
      }
      this.loggers = {};
      this.initialize(env);
    }

    Configuration.prototype.initialize = function(env) {
      var _base, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
      this.env = env;
      this.bin = (_ref = env.POW_BIN) != null ? _ref : path.join(__dirname, "../bin/pow");
      this.dnsPort = (_ref1 = env.POW_DNS_PORT) != null ? _ref1 : 20560;
      this.domains = (_ref2 = (_ref3 = env.POW_DOMAINS) != null ? _ref3 : env.POW_DOMAIN) != null ? _ref2 : "dev,salar.silk";
      this.domains = (_ref4 = typeof (_base = this.domains).split === "function" ? _base.split(",") : void 0) != null ? _ref4 : this.domains;
      this.logRoot = (_ref5 = env.POW_LOG_ROOT) != null ? _ref5 : libraryPath("Logs", "Pow");
      return this.dnsDomainPattern = compilePattern(this.domains);
    };

    Configuration.prototype.toJSON = function() {
      var key, result, _i, _len, _ref;
      result = {};
      _ref = this.constructor.optionNames;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        result[key] = this[key];
      }
      return result;
    };

    Configuration.prototype.getLogger = function(name) {
      var _base;
      return (_base = this.loggers)[name] || (_base[name] = new Logger(path.join(this.logRoot, name + ".log")));
    };

    return Configuration;

  })();

  libraryPath = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return path.join.apply(path, [process.env.HOME, "Library"].concat(__slice.call(args)));
  };

  compilePattern = function(domains) {
    return RegExp("((^|\\.)(" + (domains.join("|")) + "))\\.?$", "i");
  };

}).call(this);
